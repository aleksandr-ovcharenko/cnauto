# backend/telegram_import.py

import os

from flask import Blueprint, jsonify

from backend.models import db, Car, Brand, CarImage
from utils.telegram_file import get_telegram_file_url

telegram_import = Blueprint('telegram_import', __name__)


@telegram_import.route('/api/import_car', methods=['POST'])
def import_car(request):
    from backend.models import CarType

    token = request.headers.get("X-API-TOKEN")
    if token != os.getenv("IMPORT_API_TOKEN"):
        return jsonify({"error": "unauthorized"}), 403

    try:
        data = request.get_json()
    except Exception:
        return jsonify({"error": "invalid json"}), 400

    model = data.get("model", "").strip()
    price = int(data.get("price", 0) or 0)
    year = int(data.get("year", 0) or 0)
    mileage = int(data.get("mileage", 0) or 0)
    engine = data.get("engine", "").strip()
    car_type_name = data.get("car_type", "").strip()
    brand_name = data.get("brand", "").strip()
    description = data.get("description", "").strip()
    image_file_ids = data.get("image_file_ids", [])

    missing_fields = []
    if not model:
        missing_fields.append("model")
    if not brand_name:
        missing_fields.append("brand")
    if not image_file_ids:
        missing_fields.append("image_file_ids")

    if missing_fields:
        return jsonify({
            "error": f"Missing required fields: {', '.join(missing_fields)}"
        }), 400

    # –ù–∞–π–¥—ë–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –±—Ä–µ–Ω–¥
    brand_created = False
    brand = Brand.query.filter_by(name=brand_name).first()
    if not brand:
        brand = Brand(name=brand_name, slug=brand_name.lower().replace(" ", "-"))
        db.session.add(brand)
        db.session.flush()
        brand_created = True

    # –ù–∞–π–¥—ë–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º —Ç–∏–ø –∫—É–∑–æ–≤–∞
    car_type = None
    if car_type_name:
        car_type = CarType.query.filter_by(name=car_type_name).first()
        if not car_type:
            car_type = CarType(name=car_type_name, slug=car_type_name.lower().replace(" ", "-"))
            db.session.add(car_type)
            db.session.flush()

    # –°–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ
    car = Car(
        model=model,
        price=price,
        year=year,
        mileage=mileage,
        engine=engine,
        brand=brand,
        car_type=car_type,
        description=description,
    )
    db.session.add(car)
    db.session.flush()

    # –ü–æ–ª—É—á–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ URL –∏–∑ file_ids
    real_urls = []
    for file_id in image_file_ids:
        try:
            url = get_telegram_file_url(file_id)
            real_urls.append(url)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –∏–∑ Telegram: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i, url in enumerate(real_urls):
        image = CarImage(car_id=car.id, url=url, position=i)
        db.session.add(image)

    db.session.commit()

    print(
        f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car.model} ({car.price} ‚ÇΩ) ‚Äî {brand.name} | "
        f"ID: {car.id} | –§–æ—Ç–æ: {len(real_urls)}"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π
    ai_image = None
    prompt_hint = None

    try:
        from utils.replicate_api import generate_main_image
        ai_image = generate_main_image(real_urls[0], car_model=model, car_brand=brand)
        if ai_image:
            car.image_url = ai_image
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {ai_image}")
    except Exception as e:
        prompt_hint = (
            f"–û—á–∏—Å—Ç–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å {model} —Å—Ç–æ—è–ª–∞ –æ–¥–Ω–∞, "
            "–Ω–∞ –Ω–æ–º–µ—Ä–µ –Ω–∞–ø–∏—à–∏ cnauto.ru, –ø–æ–≤–µ—Ä–Ω–∏ –º–æ—Ä–¥–æ–π –≤–ª–µ–≤–æ –∏ –≤–ø–µ—Ä–µ–¥, "
            "–∑–∞–¥ –Ω–∞–ø—Ä–∞–≤—å –≤–ø—Ä–∞–≤–æ –∏ –Ω–∞–∑–∞–¥, –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏."
        )
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        print("üìù Prompt:", prompt_hint)
        print("üí• –û—à–∏–±–∫–∞:", e)

    return jsonify({
        "success": True,
        "car_id": car.id,
        "model": car.model,
        "price": car.price,
        "year": year,
        "brand": brand.name,
        "brand_created": brand_created,
        "main_image": ai_image,
        "gallery_images_count": len(real_urls),
        "prompt_hint": prompt_hint if not ai_image else None
    })
